// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RenderMessage.proto

#ifndef PROTOBUF_RenderMessage_2eproto__INCLUDED
#define PROTOBUF_RenderMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_RenderMessage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsVec3Impl();
void InitDefaultsVec3();
void InitDefaultsPCheckRequestImpl();
void InitDefaultsPCheckRequest();
void InitDefaultsPSceneRequest_TriangleImpl();
void InitDefaultsPSceneRequest_Triangle();
void InitDefaultsPSceneRequest_MaterialImpl();
void InitDefaultsPSceneRequest_Material();
void InitDefaultsPSceneRequest_MeshImpl();
void InitDefaultsPSceneRequest_Mesh();
void InitDefaultsPSceneRequest_SphereImpl();
void InitDefaultsPSceneRequest_Sphere();
void InitDefaultsPSceneRequestImpl();
void InitDefaultsPSceneRequest();
void InitDefaultsPRenderPixelResponseImpl();
void InitDefaultsPRenderPixelResponse();
inline void InitDefaults() {
  InitDefaultsVec3();
  InitDefaultsPCheckRequest();
  InitDefaultsPSceneRequest_Triangle();
  InitDefaultsPSceneRequest_Material();
  InitDefaultsPSceneRequest_Mesh();
  InitDefaultsPSceneRequest_Sphere();
  InitDefaultsPSceneRequest();
  InitDefaultsPRenderPixelResponse();
}
}  // namespace protobuf_RenderMessage_2eproto
class PCheckRequest;
class PCheckRequestDefaultTypeInternal;
extern PCheckRequestDefaultTypeInternal _PCheckRequest_default_instance_;
class PRenderPixelResponse;
class PRenderPixelResponseDefaultTypeInternal;
extern PRenderPixelResponseDefaultTypeInternal _PRenderPixelResponse_default_instance_;
class PSceneRequest;
class PSceneRequestDefaultTypeInternal;
extern PSceneRequestDefaultTypeInternal _PSceneRequest_default_instance_;
class PSceneRequest_Material;
class PSceneRequest_MaterialDefaultTypeInternal;
extern PSceneRequest_MaterialDefaultTypeInternal _PSceneRequest_Material_default_instance_;
class PSceneRequest_Mesh;
class PSceneRequest_MeshDefaultTypeInternal;
extern PSceneRequest_MeshDefaultTypeInternal _PSceneRequest_Mesh_default_instance_;
class PSceneRequest_Sphere;
class PSceneRequest_SphereDefaultTypeInternal;
extern PSceneRequest_SphereDefaultTypeInternal _PSceneRequest_Sphere_default_instance_;
class PSceneRequest_Triangle;
class PSceneRequest_TriangleDefaultTypeInternal;
extern PSceneRequest_TriangleDefaultTypeInternal _PSceneRequest_Triangle_default_instance_;
class Vec3;
class Vec3DefaultTypeInternal;
extern Vec3DefaultTypeInternal _Vec3_default_instance_;

// ===================================================================

class Vec3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Vec3) */ {
 public:
  Vec3();
  virtual ~Vec3();

  Vec3(const Vec3& from);

  inline Vec3& operator=(const Vec3& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vec3(Vec3&& from) noexcept
    : Vec3() {
    *this = ::std::move(from);
  }

  inline Vec3& operator=(Vec3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vec3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vec3* internal_default_instance() {
    return reinterpret_cast<const Vec3*>(
               &_Vec3_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Vec3* other);
  friend void swap(Vec3& a, Vec3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vec3* New() const PROTOBUF_FINAL { return New(NULL); }

  Vec3* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vec3& from);
  void MergeFrom(const Vec3& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vec3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float X = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float Y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float Z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:Vec3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable int _cached_size_;
  friend struct ::protobuf_RenderMessage_2eproto::TableStruct;
  friend void ::protobuf_RenderMessage_2eproto::InitDefaultsVec3Impl();
};
// -------------------------------------------------------------------

class PCheckRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PCheckRequest) */ {
 public:
  PCheckRequest();
  virtual ~PCheckRequest();

  PCheckRequest(const PCheckRequest& from);

  inline PCheckRequest& operator=(const PCheckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PCheckRequest(PCheckRequest&& from) noexcept
    : PCheckRequest() {
    *this = ::std::move(from);
  }

  inline PCheckRequest& operator=(PCheckRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PCheckRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PCheckRequest* internal_default_instance() {
    return reinterpret_cast<const PCheckRequest*>(
               &_PCheckRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PCheckRequest* other);
  friend void swap(PCheckRequest& a, PCheckRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PCheckRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  PCheckRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PCheckRequest& from);
  void MergeFrom(const PCheckRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PCheckRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 Core = 1;
  void clear_core();
  static const int kCoreFieldNumber = 1;
  ::google::protobuf::int32 core() const;
  void set_core(::google::protobuf::int32 value);

  // int32 Spp = 2;
  void clear_spp();
  static const int kSppFieldNumber = 2;
  ::google::protobuf::int32 spp() const;
  void set_spp(::google::protobuf::int32 value);

  // int32 Width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 Height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PCheckRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 core_;
  ::google::protobuf::int32 spp_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable int _cached_size_;
  friend struct ::protobuf_RenderMessage_2eproto::TableStruct;
  friend void ::protobuf_RenderMessage_2eproto::InitDefaultsPCheckRequestImpl();
};
// -------------------------------------------------------------------

class PSceneRequest_Triangle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PSceneRequest.Triangle) */ {
 public:
  PSceneRequest_Triangle();
  virtual ~PSceneRequest_Triangle();

  PSceneRequest_Triangle(const PSceneRequest_Triangle& from);

  inline PSceneRequest_Triangle& operator=(const PSceneRequest_Triangle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PSceneRequest_Triangle(PSceneRequest_Triangle&& from) noexcept
    : PSceneRequest_Triangle() {
    *this = ::std::move(from);
  }

  inline PSceneRequest_Triangle& operator=(PSceneRequest_Triangle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PSceneRequest_Triangle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSceneRequest_Triangle* internal_default_instance() {
    return reinterpret_cast<const PSceneRequest_Triangle*>(
               &_PSceneRequest_Triangle_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PSceneRequest_Triangle* other);
  friend void swap(PSceneRequest_Triangle& a, PSceneRequest_Triangle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PSceneRequest_Triangle* New() const PROTOBUF_FINAL { return New(NULL); }

  PSceneRequest_Triangle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PSceneRequest_Triangle& from);
  void MergeFrom(const PSceneRequest_Triangle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PSceneRequest_Triangle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Vec3 A = 1;
  bool has_a() const;
  void clear_a();
  static const int kAFieldNumber = 1;
  const ::Vec3& a() const;
  ::Vec3* release_a();
  ::Vec3* mutable_a();
  void set_allocated_a(::Vec3* a);

  // .Vec3 B = 2;
  bool has_b() const;
  void clear_b();
  static const int kBFieldNumber = 2;
  const ::Vec3& b() const;
  ::Vec3* release_b();
  ::Vec3* mutable_b();
  void set_allocated_b(::Vec3* b);

  // .Vec3 C = 3;
  bool has_c() const;
  void clear_c();
  static const int kCFieldNumber = 3;
  const ::Vec3& c() const;
  ::Vec3* release_c();
  ::Vec3* mutable_c();
  void set_allocated_c(::Vec3* c);

  // @@protoc_insertion_point(class_scope:PSceneRequest.Triangle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Vec3* a_;
  ::Vec3* b_;
  ::Vec3* c_;
  mutable int _cached_size_;
  friend struct ::protobuf_RenderMessage_2eproto::TableStruct;
  friend void ::protobuf_RenderMessage_2eproto::InitDefaultsPSceneRequest_TriangleImpl();
};
// -------------------------------------------------------------------

class PSceneRequest_Material : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PSceneRequest.Material) */ {
 public:
  PSceneRequest_Material();
  virtual ~PSceneRequest_Material();

  PSceneRequest_Material(const PSceneRequest_Material& from);

  inline PSceneRequest_Material& operator=(const PSceneRequest_Material& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PSceneRequest_Material(PSceneRequest_Material&& from) noexcept
    : PSceneRequest_Material() {
    *this = ::std::move(from);
  }

  inline PSceneRequest_Material& operator=(PSceneRequest_Material&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PSceneRequest_Material& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSceneRequest_Material* internal_default_instance() {
    return reinterpret_cast<const PSceneRequest_Material*>(
               &_PSceneRequest_Material_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(PSceneRequest_Material* other);
  friend void swap(PSceneRequest_Material& a, PSceneRequest_Material& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PSceneRequest_Material* New() const PROTOBUF_FINAL { return New(NULL); }

  PSceneRequest_Material* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PSceneRequest_Material& from);
  void MergeFrom(const PSceneRequest_Material& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PSceneRequest_Material* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float Parameters = 3;
  int parameters_size() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 3;
  float parameters(int index) const;
  void set_parameters(int index, float value);
  void add_parameters(float value);
  const ::google::protobuf::RepeatedField< float >&
      parameters() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_parameters();

  // string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 Type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PSceneRequest.Material)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > parameters_;
  mutable int _parameters_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend struct ::protobuf_RenderMessage_2eproto::TableStruct;
  friend void ::protobuf_RenderMessage_2eproto::InitDefaultsPSceneRequest_MaterialImpl();
};
// -------------------------------------------------------------------

class PSceneRequest_Mesh : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PSceneRequest.Mesh) */ {
 public:
  PSceneRequest_Mesh();
  virtual ~PSceneRequest_Mesh();

  PSceneRequest_Mesh(const PSceneRequest_Mesh& from);

  inline PSceneRequest_Mesh& operator=(const PSceneRequest_Mesh& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PSceneRequest_Mesh(PSceneRequest_Mesh&& from) noexcept
    : PSceneRequest_Mesh() {
    *this = ::std::move(from);
  }

  inline PSceneRequest_Mesh& operator=(PSceneRequest_Mesh&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PSceneRequest_Mesh& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSceneRequest_Mesh* internal_default_instance() {
    return reinterpret_cast<const PSceneRequest_Mesh*>(
               &_PSceneRequest_Mesh_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(PSceneRequest_Mesh* other);
  friend void swap(PSceneRequest_Mesh& a, PSceneRequest_Mesh& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PSceneRequest_Mesh* New() const PROTOBUF_FINAL { return New(NULL); }

  PSceneRequest_Mesh* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PSceneRequest_Mesh& from);
  void MergeFrom(const PSceneRequest_Mesh& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PSceneRequest_Mesh* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PSceneRequest.Triangle Triangles = 2;
  int triangles_size() const;
  void clear_triangles();
  static const int kTrianglesFieldNumber = 2;
  const ::PSceneRequest_Triangle& triangles(int index) const;
  ::PSceneRequest_Triangle* mutable_triangles(int index);
  ::PSceneRequest_Triangle* add_triangles();
  ::google::protobuf::RepeatedPtrField< ::PSceneRequest_Triangle >*
      mutable_triangles();
  const ::google::protobuf::RepeatedPtrField< ::PSceneRequest_Triangle >&
      triangles() const;

  // string MatName = 1;
  void clear_matname();
  static const int kMatNameFieldNumber = 1;
  const ::std::string& matname() const;
  void set_matname(const ::std::string& value);
  #if LANG_CXX11
  void set_matname(::std::string&& value);
  #endif
  void set_matname(const char* value);
  void set_matname(const char* value, size_t size);
  ::std::string* mutable_matname();
  ::std::string* release_matname();
  void set_allocated_matname(::std::string* matname);

  // @@protoc_insertion_point(class_scope:PSceneRequest.Mesh)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::PSceneRequest_Triangle > triangles_;
  ::google::protobuf::internal::ArenaStringPtr matname_;
  mutable int _cached_size_;
  friend struct ::protobuf_RenderMessage_2eproto::TableStruct;
  friend void ::protobuf_RenderMessage_2eproto::InitDefaultsPSceneRequest_MeshImpl();
};
// -------------------------------------------------------------------

class PSceneRequest_Sphere : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PSceneRequest.Sphere) */ {
 public:
  PSceneRequest_Sphere();
  virtual ~PSceneRequest_Sphere();

  PSceneRequest_Sphere(const PSceneRequest_Sphere& from);

  inline PSceneRequest_Sphere& operator=(const PSceneRequest_Sphere& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PSceneRequest_Sphere(PSceneRequest_Sphere&& from) noexcept
    : PSceneRequest_Sphere() {
    *this = ::std::move(from);
  }

  inline PSceneRequest_Sphere& operator=(PSceneRequest_Sphere&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PSceneRequest_Sphere& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSceneRequest_Sphere* internal_default_instance() {
    return reinterpret_cast<const PSceneRequest_Sphere*>(
               &_PSceneRequest_Sphere_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(PSceneRequest_Sphere* other);
  friend void swap(PSceneRequest_Sphere& a, PSceneRequest_Sphere& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PSceneRequest_Sphere* New() const PROTOBUF_FINAL { return New(NULL); }

  PSceneRequest_Sphere* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PSceneRequest_Sphere& from);
  void MergeFrom(const PSceneRequest_Sphere& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PSceneRequest_Sphere* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string MatName = 1;
  void clear_matname();
  static const int kMatNameFieldNumber = 1;
  const ::std::string& matname() const;
  void set_matname(const ::std::string& value);
  #if LANG_CXX11
  void set_matname(::std::string&& value);
  #endif
  void set_matname(const char* value);
  void set_matname(const char* value, size_t size);
  ::std::string* mutable_matname();
  ::std::string* release_matname();
  void set_allocated_matname(::std::string* matname);

  // .Vec3 Center = 2;
  bool has_center() const;
  void clear_center();
  static const int kCenterFieldNumber = 2;
  const ::Vec3& center() const;
  ::Vec3* release_center();
  ::Vec3* mutable_center();
  void set_allocated_center(::Vec3* center);

  // float Radious = 3;
  void clear_radious();
  static const int kRadiousFieldNumber = 3;
  float radious() const;
  void set_radious(float value);

  // @@protoc_insertion_point(class_scope:PSceneRequest.Sphere)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr matname_;
  ::Vec3* center_;
  float radious_;
  mutable int _cached_size_;
  friend struct ::protobuf_RenderMessage_2eproto::TableStruct;
  friend void ::protobuf_RenderMessage_2eproto::InitDefaultsPSceneRequest_SphereImpl();
};
// -------------------------------------------------------------------

class PSceneRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PSceneRequest) */ {
 public:
  PSceneRequest();
  virtual ~PSceneRequest();

  PSceneRequest(const PSceneRequest& from);

  inline PSceneRequest& operator=(const PSceneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PSceneRequest(PSceneRequest&& from) noexcept
    : PSceneRequest() {
    *this = ::std::move(from);
  }

  inline PSceneRequest& operator=(PSceneRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PSceneRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSceneRequest* internal_default_instance() {
    return reinterpret_cast<const PSceneRequest*>(
               &_PSceneRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(PSceneRequest* other);
  friend void swap(PSceneRequest& a, PSceneRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PSceneRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  PSceneRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PSceneRequest& from);
  void MergeFrom(const PSceneRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PSceneRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PSceneRequest_Triangle Triangle;
  typedef PSceneRequest_Material Material;
  typedef PSceneRequest_Mesh Mesh;
  typedef PSceneRequest_Sphere Sphere;

  // accessors -------------------------------------------------------

  // repeated .PSceneRequest.Material Materials = 1;
  int materials_size() const;
  void clear_materials();
  static const int kMaterialsFieldNumber = 1;
  const ::PSceneRequest_Material& materials(int index) const;
  ::PSceneRequest_Material* mutable_materials(int index);
  ::PSceneRequest_Material* add_materials();
  ::google::protobuf::RepeatedPtrField< ::PSceneRequest_Material >*
      mutable_materials();
  const ::google::protobuf::RepeatedPtrField< ::PSceneRequest_Material >&
      materials() const;

  // repeated .PSceneRequest.Mesh Meshs = 2;
  int meshs_size() const;
  void clear_meshs();
  static const int kMeshsFieldNumber = 2;
  const ::PSceneRequest_Mesh& meshs(int index) const;
  ::PSceneRequest_Mesh* mutable_meshs(int index);
  ::PSceneRequest_Mesh* add_meshs();
  ::google::protobuf::RepeatedPtrField< ::PSceneRequest_Mesh >*
      mutable_meshs();
  const ::google::protobuf::RepeatedPtrField< ::PSceneRequest_Mesh >&
      meshs() const;

  // repeated .PSceneRequest.Sphere Spheres = 3;
  int spheres_size() const;
  void clear_spheres();
  static const int kSpheresFieldNumber = 3;
  const ::PSceneRequest_Sphere& spheres(int index) const;
  ::PSceneRequest_Sphere* mutable_spheres(int index);
  ::PSceneRequest_Sphere* add_spheres();
  ::google::protobuf::RepeatedPtrField< ::PSceneRequest_Sphere >*
      mutable_spheres();
  const ::google::protobuf::RepeatedPtrField< ::PSceneRequest_Sphere >&
      spheres() const;

  // .Vec3 CameraLocation = 4;
  bool has_cameralocation() const;
  void clear_cameralocation();
  static const int kCameraLocationFieldNumber = 4;
  const ::Vec3& cameralocation() const;
  ::Vec3* release_cameralocation();
  ::Vec3* mutable_cameralocation();
  void set_allocated_cameralocation(::Vec3* cameralocation);

  // .Vec3 CameraForward = 5;
  bool has_cameraforward() const;
  void clear_cameraforward();
  static const int kCameraForwardFieldNumber = 5;
  const ::Vec3& cameraforward() const;
  ::Vec3* release_cameraforward();
  ::Vec3* mutable_cameraforward();
  void set_allocated_cameraforward(::Vec3* cameraforward);

  // .Vec3 CameraRight = 6;
  bool has_cameraright() const;
  void clear_cameraright();
  static const int kCameraRightFieldNumber = 6;
  const ::Vec3& cameraright() const;
  ::Vec3* release_cameraright();
  ::Vec3* mutable_cameraright();
  void set_allocated_cameraright(::Vec3* cameraright);

  // @@protoc_insertion_point(class_scope:PSceneRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::PSceneRequest_Material > materials_;
  ::google::protobuf::RepeatedPtrField< ::PSceneRequest_Mesh > meshs_;
  ::google::protobuf::RepeatedPtrField< ::PSceneRequest_Sphere > spheres_;
  ::Vec3* cameralocation_;
  ::Vec3* cameraforward_;
  ::Vec3* cameraright_;
  mutable int _cached_size_;
  friend struct ::protobuf_RenderMessage_2eproto::TableStruct;
  friend void ::protobuf_RenderMessage_2eproto::InitDefaultsPSceneRequestImpl();
};
// -------------------------------------------------------------------

class PRenderPixelResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PRenderPixelResponse) */ {
 public:
  PRenderPixelResponse();
  virtual ~PRenderPixelResponse();

  PRenderPixelResponse(const PRenderPixelResponse& from);

  inline PRenderPixelResponse& operator=(const PRenderPixelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PRenderPixelResponse(PRenderPixelResponse&& from) noexcept
    : PRenderPixelResponse() {
    *this = ::std::move(from);
  }

  inline PRenderPixelResponse& operator=(PRenderPixelResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PRenderPixelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PRenderPixelResponse* internal_default_instance() {
    return reinterpret_cast<const PRenderPixelResponse*>(
               &_PRenderPixelResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(PRenderPixelResponse* other);
  friend void swap(PRenderPixelResponse& a, PRenderPixelResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PRenderPixelResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  PRenderPixelResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PRenderPixelResponse& from);
  void MergeFrom(const PRenderPixelResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PRenderPixelResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Vec3 Result = 3;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 3;
  const ::Vec3& result() const;
  ::Vec3* release_result();
  ::Vec3* mutable_result();
  void set_allocated_result(::Vec3* result);

  // int32 X = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 Y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PRenderPixelResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Vec3* result_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  mutable int _cached_size_;
  friend struct ::protobuf_RenderMessage_2eproto::TableStruct;
  friend void ::protobuf_RenderMessage_2eproto::InitDefaultsPRenderPixelResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vec3

// float X = 1;
inline void Vec3::clear_x() {
  x_ = 0;
}
inline float Vec3::x() const {
  // @@protoc_insertion_point(field_get:Vec3.X)
  return x_;
}
inline void Vec3::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Vec3.X)
}

// float Y = 2;
inline void Vec3::clear_y() {
  y_ = 0;
}
inline float Vec3::y() const {
  // @@protoc_insertion_point(field_get:Vec3.Y)
  return y_;
}
inline void Vec3::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Vec3.Y)
}

// float Z = 3;
inline void Vec3::clear_z() {
  z_ = 0;
}
inline float Vec3::z() const {
  // @@protoc_insertion_point(field_get:Vec3.Z)
  return z_;
}
inline void Vec3::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:Vec3.Z)
}

// -------------------------------------------------------------------

// PCheckRequest

// int32 Core = 1;
inline void PCheckRequest::clear_core() {
  core_ = 0;
}
inline ::google::protobuf::int32 PCheckRequest::core() const {
  // @@protoc_insertion_point(field_get:PCheckRequest.Core)
  return core_;
}
inline void PCheckRequest::set_core(::google::protobuf::int32 value) {
  
  core_ = value;
  // @@protoc_insertion_point(field_set:PCheckRequest.Core)
}

// int32 Spp = 2;
inline void PCheckRequest::clear_spp() {
  spp_ = 0;
}
inline ::google::protobuf::int32 PCheckRequest::spp() const {
  // @@protoc_insertion_point(field_get:PCheckRequest.Spp)
  return spp_;
}
inline void PCheckRequest::set_spp(::google::protobuf::int32 value) {
  
  spp_ = value;
  // @@protoc_insertion_point(field_set:PCheckRequest.Spp)
}

// int32 Width = 3;
inline void PCheckRequest::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 PCheckRequest::width() const {
  // @@protoc_insertion_point(field_get:PCheckRequest.Width)
  return width_;
}
inline void PCheckRequest::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:PCheckRequest.Width)
}

// int32 Height = 4;
inline void PCheckRequest::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 PCheckRequest::height() const {
  // @@protoc_insertion_point(field_get:PCheckRequest.Height)
  return height_;
}
inline void PCheckRequest::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:PCheckRequest.Height)
}

// -------------------------------------------------------------------

// PSceneRequest_Triangle

// .Vec3 A = 1;
inline bool PSceneRequest_Triangle::has_a() const {
  return this != internal_default_instance() && a_ != NULL;
}
inline void PSceneRequest_Triangle::clear_a() {
  if (GetArenaNoVirtual() == NULL && a_ != NULL) {
    delete a_;
  }
  a_ = NULL;
}
inline const ::Vec3& PSceneRequest_Triangle::a() const {
  const ::Vec3* p = a_;
  // @@protoc_insertion_point(field_get:PSceneRequest.Triangle.A)
  return p != NULL ? *p : *reinterpret_cast<const ::Vec3*>(
      &::_Vec3_default_instance_);
}
inline ::Vec3* PSceneRequest_Triangle::release_a() {
  // @@protoc_insertion_point(field_release:PSceneRequest.Triangle.A)
  
  ::Vec3* temp = a_;
  a_ = NULL;
  return temp;
}
inline ::Vec3* PSceneRequest_Triangle::mutable_a() {
  
  if (a_ == NULL) {
    a_ = new ::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:PSceneRequest.Triangle.A)
  return a_;
}
inline void PSceneRequest_Triangle::set_allocated_a(::Vec3* a) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete a_;
  }
  if (a) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      a = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, a, submessage_arena);
    }
    
  } else {
    
  }
  a_ = a;
  // @@protoc_insertion_point(field_set_allocated:PSceneRequest.Triangle.A)
}

// .Vec3 B = 2;
inline bool PSceneRequest_Triangle::has_b() const {
  return this != internal_default_instance() && b_ != NULL;
}
inline void PSceneRequest_Triangle::clear_b() {
  if (GetArenaNoVirtual() == NULL && b_ != NULL) {
    delete b_;
  }
  b_ = NULL;
}
inline const ::Vec3& PSceneRequest_Triangle::b() const {
  const ::Vec3* p = b_;
  // @@protoc_insertion_point(field_get:PSceneRequest.Triangle.B)
  return p != NULL ? *p : *reinterpret_cast<const ::Vec3*>(
      &::_Vec3_default_instance_);
}
inline ::Vec3* PSceneRequest_Triangle::release_b() {
  // @@protoc_insertion_point(field_release:PSceneRequest.Triangle.B)
  
  ::Vec3* temp = b_;
  b_ = NULL;
  return temp;
}
inline ::Vec3* PSceneRequest_Triangle::mutable_b() {
  
  if (b_ == NULL) {
    b_ = new ::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:PSceneRequest.Triangle.B)
  return b_;
}
inline void PSceneRequest_Triangle::set_allocated_b(::Vec3* b) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete b_;
  }
  if (b) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      b = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, b, submessage_arena);
    }
    
  } else {
    
  }
  b_ = b;
  // @@protoc_insertion_point(field_set_allocated:PSceneRequest.Triangle.B)
}

// .Vec3 C = 3;
inline bool PSceneRequest_Triangle::has_c() const {
  return this != internal_default_instance() && c_ != NULL;
}
inline void PSceneRequest_Triangle::clear_c() {
  if (GetArenaNoVirtual() == NULL && c_ != NULL) {
    delete c_;
  }
  c_ = NULL;
}
inline const ::Vec3& PSceneRequest_Triangle::c() const {
  const ::Vec3* p = c_;
  // @@protoc_insertion_point(field_get:PSceneRequest.Triangle.C)
  return p != NULL ? *p : *reinterpret_cast<const ::Vec3*>(
      &::_Vec3_default_instance_);
}
inline ::Vec3* PSceneRequest_Triangle::release_c() {
  // @@protoc_insertion_point(field_release:PSceneRequest.Triangle.C)
  
  ::Vec3* temp = c_;
  c_ = NULL;
  return temp;
}
inline ::Vec3* PSceneRequest_Triangle::mutable_c() {
  
  if (c_ == NULL) {
    c_ = new ::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:PSceneRequest.Triangle.C)
  return c_;
}
inline void PSceneRequest_Triangle::set_allocated_c(::Vec3* c) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete c_;
  }
  if (c) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      c = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, c, submessage_arena);
    }
    
  } else {
    
  }
  c_ = c;
  // @@protoc_insertion_point(field_set_allocated:PSceneRequest.Triangle.C)
}

// -------------------------------------------------------------------

// PSceneRequest_Material

// string Name = 1;
inline void PSceneRequest_Material::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PSceneRequest_Material::name() const {
  // @@protoc_insertion_point(field_get:PSceneRequest.Material.Name)
  return name_.GetNoArena();
}
inline void PSceneRequest_Material::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PSceneRequest.Material.Name)
}
#if LANG_CXX11
inline void PSceneRequest_Material::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PSceneRequest.Material.Name)
}
#endif
inline void PSceneRequest_Material::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PSceneRequest.Material.Name)
}
inline void PSceneRequest_Material::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PSceneRequest.Material.Name)
}
inline ::std::string* PSceneRequest_Material::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:PSceneRequest.Material.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PSceneRequest_Material::release_name() {
  // @@protoc_insertion_point(field_release:PSceneRequest.Material.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PSceneRequest_Material::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:PSceneRequest.Material.Name)
}

// int32 Type = 2;
inline void PSceneRequest_Material::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 PSceneRequest_Material::type() const {
  // @@protoc_insertion_point(field_get:PSceneRequest.Material.Type)
  return type_;
}
inline void PSceneRequest_Material::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:PSceneRequest.Material.Type)
}

// repeated float Parameters = 3;
inline int PSceneRequest_Material::parameters_size() const {
  return parameters_.size();
}
inline void PSceneRequest_Material::clear_parameters() {
  parameters_.Clear();
}
inline float PSceneRequest_Material::parameters(int index) const {
  // @@protoc_insertion_point(field_get:PSceneRequest.Material.Parameters)
  return parameters_.Get(index);
}
inline void PSceneRequest_Material::set_parameters(int index, float value) {
  parameters_.Set(index, value);
  // @@protoc_insertion_point(field_set:PSceneRequest.Material.Parameters)
}
inline void PSceneRequest_Material::add_parameters(float value) {
  parameters_.Add(value);
  // @@protoc_insertion_point(field_add:PSceneRequest.Material.Parameters)
}
inline const ::google::protobuf::RepeatedField< float >&
PSceneRequest_Material::parameters() const {
  // @@protoc_insertion_point(field_list:PSceneRequest.Material.Parameters)
  return parameters_;
}
inline ::google::protobuf::RepeatedField< float >*
PSceneRequest_Material::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:PSceneRequest.Material.Parameters)
  return &parameters_;
}

// -------------------------------------------------------------------

// PSceneRequest_Mesh

// string MatName = 1;
inline void PSceneRequest_Mesh::clear_matname() {
  matname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PSceneRequest_Mesh::matname() const {
  // @@protoc_insertion_point(field_get:PSceneRequest.Mesh.MatName)
  return matname_.GetNoArena();
}
inline void PSceneRequest_Mesh::set_matname(const ::std::string& value) {
  
  matname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PSceneRequest.Mesh.MatName)
}
#if LANG_CXX11
inline void PSceneRequest_Mesh::set_matname(::std::string&& value) {
  
  matname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PSceneRequest.Mesh.MatName)
}
#endif
inline void PSceneRequest_Mesh::set_matname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  matname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PSceneRequest.Mesh.MatName)
}
inline void PSceneRequest_Mesh::set_matname(const char* value, size_t size) {
  
  matname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PSceneRequest.Mesh.MatName)
}
inline ::std::string* PSceneRequest_Mesh::mutable_matname() {
  
  // @@protoc_insertion_point(field_mutable:PSceneRequest.Mesh.MatName)
  return matname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PSceneRequest_Mesh::release_matname() {
  // @@protoc_insertion_point(field_release:PSceneRequest.Mesh.MatName)
  
  return matname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PSceneRequest_Mesh::set_allocated_matname(::std::string* matname) {
  if (matname != NULL) {
    
  } else {
    
  }
  matname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), matname);
  // @@protoc_insertion_point(field_set_allocated:PSceneRequest.Mesh.MatName)
}

// repeated .PSceneRequest.Triangle Triangles = 2;
inline int PSceneRequest_Mesh::triangles_size() const {
  return triangles_.size();
}
inline void PSceneRequest_Mesh::clear_triangles() {
  triangles_.Clear();
}
inline const ::PSceneRequest_Triangle& PSceneRequest_Mesh::triangles(int index) const {
  // @@protoc_insertion_point(field_get:PSceneRequest.Mesh.Triangles)
  return triangles_.Get(index);
}
inline ::PSceneRequest_Triangle* PSceneRequest_Mesh::mutable_triangles(int index) {
  // @@protoc_insertion_point(field_mutable:PSceneRequest.Mesh.Triangles)
  return triangles_.Mutable(index);
}
inline ::PSceneRequest_Triangle* PSceneRequest_Mesh::add_triangles() {
  // @@protoc_insertion_point(field_add:PSceneRequest.Mesh.Triangles)
  return triangles_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::PSceneRequest_Triangle >*
PSceneRequest_Mesh::mutable_triangles() {
  // @@protoc_insertion_point(field_mutable_list:PSceneRequest.Mesh.Triangles)
  return &triangles_;
}
inline const ::google::protobuf::RepeatedPtrField< ::PSceneRequest_Triangle >&
PSceneRequest_Mesh::triangles() const {
  // @@protoc_insertion_point(field_list:PSceneRequest.Mesh.Triangles)
  return triangles_;
}

// -------------------------------------------------------------------

// PSceneRequest_Sphere

// string MatName = 1;
inline void PSceneRequest_Sphere::clear_matname() {
  matname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PSceneRequest_Sphere::matname() const {
  // @@protoc_insertion_point(field_get:PSceneRequest.Sphere.MatName)
  return matname_.GetNoArena();
}
inline void PSceneRequest_Sphere::set_matname(const ::std::string& value) {
  
  matname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PSceneRequest.Sphere.MatName)
}
#if LANG_CXX11
inline void PSceneRequest_Sphere::set_matname(::std::string&& value) {
  
  matname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PSceneRequest.Sphere.MatName)
}
#endif
inline void PSceneRequest_Sphere::set_matname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  matname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PSceneRequest.Sphere.MatName)
}
inline void PSceneRequest_Sphere::set_matname(const char* value, size_t size) {
  
  matname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PSceneRequest.Sphere.MatName)
}
inline ::std::string* PSceneRequest_Sphere::mutable_matname() {
  
  // @@protoc_insertion_point(field_mutable:PSceneRequest.Sphere.MatName)
  return matname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PSceneRequest_Sphere::release_matname() {
  // @@protoc_insertion_point(field_release:PSceneRequest.Sphere.MatName)
  
  return matname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PSceneRequest_Sphere::set_allocated_matname(::std::string* matname) {
  if (matname != NULL) {
    
  } else {
    
  }
  matname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), matname);
  // @@protoc_insertion_point(field_set_allocated:PSceneRequest.Sphere.MatName)
}

// .Vec3 Center = 2;
inline bool PSceneRequest_Sphere::has_center() const {
  return this != internal_default_instance() && center_ != NULL;
}
inline void PSceneRequest_Sphere::clear_center() {
  if (GetArenaNoVirtual() == NULL && center_ != NULL) {
    delete center_;
  }
  center_ = NULL;
}
inline const ::Vec3& PSceneRequest_Sphere::center() const {
  const ::Vec3* p = center_;
  // @@protoc_insertion_point(field_get:PSceneRequest.Sphere.Center)
  return p != NULL ? *p : *reinterpret_cast<const ::Vec3*>(
      &::_Vec3_default_instance_);
}
inline ::Vec3* PSceneRequest_Sphere::release_center() {
  // @@protoc_insertion_point(field_release:PSceneRequest.Sphere.Center)
  
  ::Vec3* temp = center_;
  center_ = NULL;
  return temp;
}
inline ::Vec3* PSceneRequest_Sphere::mutable_center() {
  
  if (center_ == NULL) {
    center_ = new ::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:PSceneRequest.Sphere.Center)
  return center_;
}
inline void PSceneRequest_Sphere::set_allocated_center(::Vec3* center) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete center_;
  }
  if (center) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      center = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:PSceneRequest.Sphere.Center)
}

// float Radious = 3;
inline void PSceneRequest_Sphere::clear_radious() {
  radious_ = 0;
}
inline float PSceneRequest_Sphere::radious() const {
  // @@protoc_insertion_point(field_get:PSceneRequest.Sphere.Radious)
  return radious_;
}
inline void PSceneRequest_Sphere::set_radious(float value) {
  
  radious_ = value;
  // @@protoc_insertion_point(field_set:PSceneRequest.Sphere.Radious)
}

// -------------------------------------------------------------------

// PSceneRequest

// repeated .PSceneRequest.Material Materials = 1;
inline int PSceneRequest::materials_size() const {
  return materials_.size();
}
inline void PSceneRequest::clear_materials() {
  materials_.Clear();
}
inline const ::PSceneRequest_Material& PSceneRequest::materials(int index) const {
  // @@protoc_insertion_point(field_get:PSceneRequest.Materials)
  return materials_.Get(index);
}
inline ::PSceneRequest_Material* PSceneRequest::mutable_materials(int index) {
  // @@protoc_insertion_point(field_mutable:PSceneRequest.Materials)
  return materials_.Mutable(index);
}
inline ::PSceneRequest_Material* PSceneRequest::add_materials() {
  // @@protoc_insertion_point(field_add:PSceneRequest.Materials)
  return materials_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::PSceneRequest_Material >*
PSceneRequest::mutable_materials() {
  // @@protoc_insertion_point(field_mutable_list:PSceneRequest.Materials)
  return &materials_;
}
inline const ::google::protobuf::RepeatedPtrField< ::PSceneRequest_Material >&
PSceneRequest::materials() const {
  // @@protoc_insertion_point(field_list:PSceneRequest.Materials)
  return materials_;
}

// repeated .PSceneRequest.Mesh Meshs = 2;
inline int PSceneRequest::meshs_size() const {
  return meshs_.size();
}
inline void PSceneRequest::clear_meshs() {
  meshs_.Clear();
}
inline const ::PSceneRequest_Mesh& PSceneRequest::meshs(int index) const {
  // @@protoc_insertion_point(field_get:PSceneRequest.Meshs)
  return meshs_.Get(index);
}
inline ::PSceneRequest_Mesh* PSceneRequest::mutable_meshs(int index) {
  // @@protoc_insertion_point(field_mutable:PSceneRequest.Meshs)
  return meshs_.Mutable(index);
}
inline ::PSceneRequest_Mesh* PSceneRequest::add_meshs() {
  // @@protoc_insertion_point(field_add:PSceneRequest.Meshs)
  return meshs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::PSceneRequest_Mesh >*
PSceneRequest::mutable_meshs() {
  // @@protoc_insertion_point(field_mutable_list:PSceneRequest.Meshs)
  return &meshs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::PSceneRequest_Mesh >&
PSceneRequest::meshs() const {
  // @@protoc_insertion_point(field_list:PSceneRequest.Meshs)
  return meshs_;
}

// repeated .PSceneRequest.Sphere Spheres = 3;
inline int PSceneRequest::spheres_size() const {
  return spheres_.size();
}
inline void PSceneRequest::clear_spheres() {
  spheres_.Clear();
}
inline const ::PSceneRequest_Sphere& PSceneRequest::spheres(int index) const {
  // @@protoc_insertion_point(field_get:PSceneRequest.Spheres)
  return spheres_.Get(index);
}
inline ::PSceneRequest_Sphere* PSceneRequest::mutable_spheres(int index) {
  // @@protoc_insertion_point(field_mutable:PSceneRequest.Spheres)
  return spheres_.Mutable(index);
}
inline ::PSceneRequest_Sphere* PSceneRequest::add_spheres() {
  // @@protoc_insertion_point(field_add:PSceneRequest.Spheres)
  return spheres_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::PSceneRequest_Sphere >*
PSceneRequest::mutable_spheres() {
  // @@protoc_insertion_point(field_mutable_list:PSceneRequest.Spheres)
  return &spheres_;
}
inline const ::google::protobuf::RepeatedPtrField< ::PSceneRequest_Sphere >&
PSceneRequest::spheres() const {
  // @@protoc_insertion_point(field_list:PSceneRequest.Spheres)
  return spheres_;
}

// .Vec3 CameraLocation = 4;
inline bool PSceneRequest::has_cameralocation() const {
  return this != internal_default_instance() && cameralocation_ != NULL;
}
inline void PSceneRequest::clear_cameralocation() {
  if (GetArenaNoVirtual() == NULL && cameralocation_ != NULL) {
    delete cameralocation_;
  }
  cameralocation_ = NULL;
}
inline const ::Vec3& PSceneRequest::cameralocation() const {
  const ::Vec3* p = cameralocation_;
  // @@protoc_insertion_point(field_get:PSceneRequest.CameraLocation)
  return p != NULL ? *p : *reinterpret_cast<const ::Vec3*>(
      &::_Vec3_default_instance_);
}
inline ::Vec3* PSceneRequest::release_cameralocation() {
  // @@protoc_insertion_point(field_release:PSceneRequest.CameraLocation)
  
  ::Vec3* temp = cameralocation_;
  cameralocation_ = NULL;
  return temp;
}
inline ::Vec3* PSceneRequest::mutable_cameralocation() {
  
  if (cameralocation_ == NULL) {
    cameralocation_ = new ::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:PSceneRequest.CameraLocation)
  return cameralocation_;
}
inline void PSceneRequest::set_allocated_cameralocation(::Vec3* cameralocation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cameralocation_;
  }
  if (cameralocation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cameralocation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cameralocation, submessage_arena);
    }
    
  } else {
    
  }
  cameralocation_ = cameralocation;
  // @@protoc_insertion_point(field_set_allocated:PSceneRequest.CameraLocation)
}

// .Vec3 CameraForward = 5;
inline bool PSceneRequest::has_cameraforward() const {
  return this != internal_default_instance() && cameraforward_ != NULL;
}
inline void PSceneRequest::clear_cameraforward() {
  if (GetArenaNoVirtual() == NULL && cameraforward_ != NULL) {
    delete cameraforward_;
  }
  cameraforward_ = NULL;
}
inline const ::Vec3& PSceneRequest::cameraforward() const {
  const ::Vec3* p = cameraforward_;
  // @@protoc_insertion_point(field_get:PSceneRequest.CameraForward)
  return p != NULL ? *p : *reinterpret_cast<const ::Vec3*>(
      &::_Vec3_default_instance_);
}
inline ::Vec3* PSceneRequest::release_cameraforward() {
  // @@protoc_insertion_point(field_release:PSceneRequest.CameraForward)
  
  ::Vec3* temp = cameraforward_;
  cameraforward_ = NULL;
  return temp;
}
inline ::Vec3* PSceneRequest::mutable_cameraforward() {
  
  if (cameraforward_ == NULL) {
    cameraforward_ = new ::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:PSceneRequest.CameraForward)
  return cameraforward_;
}
inline void PSceneRequest::set_allocated_cameraforward(::Vec3* cameraforward) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cameraforward_;
  }
  if (cameraforward) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cameraforward = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cameraforward, submessage_arena);
    }
    
  } else {
    
  }
  cameraforward_ = cameraforward;
  // @@protoc_insertion_point(field_set_allocated:PSceneRequest.CameraForward)
}

// .Vec3 CameraRight = 6;
inline bool PSceneRequest::has_cameraright() const {
  return this != internal_default_instance() && cameraright_ != NULL;
}
inline void PSceneRequest::clear_cameraright() {
  if (GetArenaNoVirtual() == NULL && cameraright_ != NULL) {
    delete cameraright_;
  }
  cameraright_ = NULL;
}
inline const ::Vec3& PSceneRequest::cameraright() const {
  const ::Vec3* p = cameraright_;
  // @@protoc_insertion_point(field_get:PSceneRequest.CameraRight)
  return p != NULL ? *p : *reinterpret_cast<const ::Vec3*>(
      &::_Vec3_default_instance_);
}
inline ::Vec3* PSceneRequest::release_cameraright() {
  // @@protoc_insertion_point(field_release:PSceneRequest.CameraRight)
  
  ::Vec3* temp = cameraright_;
  cameraright_ = NULL;
  return temp;
}
inline ::Vec3* PSceneRequest::mutable_cameraright() {
  
  if (cameraright_ == NULL) {
    cameraright_ = new ::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:PSceneRequest.CameraRight)
  return cameraright_;
}
inline void PSceneRequest::set_allocated_cameraright(::Vec3* cameraright) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cameraright_;
  }
  if (cameraright) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cameraright = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cameraright, submessage_arena);
    }
    
  } else {
    
  }
  cameraright_ = cameraright;
  // @@protoc_insertion_point(field_set_allocated:PSceneRequest.CameraRight)
}

// -------------------------------------------------------------------

// PRenderPixelResponse

// int32 X = 1;
inline void PRenderPixelResponse::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 PRenderPixelResponse::x() const {
  // @@protoc_insertion_point(field_get:PRenderPixelResponse.X)
  return x_;
}
inline void PRenderPixelResponse::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:PRenderPixelResponse.X)
}

// int32 Y = 2;
inline void PRenderPixelResponse::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 PRenderPixelResponse::y() const {
  // @@protoc_insertion_point(field_get:PRenderPixelResponse.Y)
  return y_;
}
inline void PRenderPixelResponse::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:PRenderPixelResponse.Y)
}

// .Vec3 Result = 3;
inline bool PRenderPixelResponse::has_result() const {
  return this != internal_default_instance() && result_ != NULL;
}
inline void PRenderPixelResponse::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) {
    delete result_;
  }
  result_ = NULL;
}
inline const ::Vec3& PRenderPixelResponse::result() const {
  const ::Vec3* p = result_;
  // @@protoc_insertion_point(field_get:PRenderPixelResponse.Result)
  return p != NULL ? *p : *reinterpret_cast<const ::Vec3*>(
      &::_Vec3_default_instance_);
}
inline ::Vec3* PRenderPixelResponse::release_result() {
  // @@protoc_insertion_point(field_release:PRenderPixelResponse.Result)
  
  ::Vec3* temp = result_;
  result_ = NULL;
  return temp;
}
inline ::Vec3* PRenderPixelResponse::mutable_result() {
  
  if (result_ == NULL) {
    result_ = new ::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:PRenderPixelResponse.Result)
  return result_;
}
inline void PRenderPixelResponse::set_allocated_result(::Vec3* result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete result_;
  }
  if (result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:PRenderPixelResponse.Result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RenderMessage_2eproto__INCLUDED
