// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RenderMessage.proto

#include "RenderMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class Vec3DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vec3>
      _instance;
} _Vec3_default_instance_;
class PCheckRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PCheckRequest>
      _instance;
} _PCheckRequest_default_instance_;
class PSceneRequest_TriangleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PSceneRequest_Triangle>
      _instance;
} _PSceneRequest_Triangle_default_instance_;
class PSceneRequest_MaterialDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PSceneRequest_Material>
      _instance;
} _PSceneRequest_Material_default_instance_;
class PSceneRequest_MeshDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PSceneRequest_Mesh>
      _instance;
} _PSceneRequest_Mesh_default_instance_;
class PSceneRequest_SphereDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PSceneRequest_Sphere>
      _instance;
} _PSceneRequest_Sphere_default_instance_;
class PSceneRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PSceneRequest>
      _instance;
} _PSceneRequest_default_instance_;
class PRenderPixelResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PRenderPixelResponse>
      _instance;
} _PRenderPixelResponse_default_instance_;
namespace protobuf_RenderMessage_2eproto {
void InitDefaultsVec3Impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_Vec3_default_instance_;
    new (ptr) ::Vec3();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Vec3::InitAsDefaultInstance();
}

void InitDefaultsVec3() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVec3Impl);
}

void InitDefaultsPCheckRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_PCheckRequest_default_instance_;
    new (ptr) ::PCheckRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PCheckRequest::InitAsDefaultInstance();
}

void InitDefaultsPCheckRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPCheckRequestImpl);
}

void InitDefaultsPSceneRequest_TriangleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_RenderMessage_2eproto::InitDefaultsVec3();
  {
    void* ptr = &::_PSceneRequest_Triangle_default_instance_;
    new (ptr) ::PSceneRequest_Triangle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PSceneRequest_Triangle::InitAsDefaultInstance();
}

void InitDefaultsPSceneRequest_Triangle() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPSceneRequest_TriangleImpl);
}

void InitDefaultsPSceneRequest_MaterialImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_PSceneRequest_Material_default_instance_;
    new (ptr) ::PSceneRequest_Material();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PSceneRequest_Material::InitAsDefaultInstance();
}

void InitDefaultsPSceneRequest_Material() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPSceneRequest_MaterialImpl);
}

void InitDefaultsPSceneRequest_MeshImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_RenderMessage_2eproto::InitDefaultsPSceneRequest_Triangle();
  {
    void* ptr = &::_PSceneRequest_Mesh_default_instance_;
    new (ptr) ::PSceneRequest_Mesh();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PSceneRequest_Mesh::InitAsDefaultInstance();
}

void InitDefaultsPSceneRequest_Mesh() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPSceneRequest_MeshImpl);
}

void InitDefaultsPSceneRequest_SphereImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_RenderMessage_2eproto::InitDefaultsVec3();
  {
    void* ptr = &::_PSceneRequest_Sphere_default_instance_;
    new (ptr) ::PSceneRequest_Sphere();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PSceneRequest_Sphere::InitAsDefaultInstance();
}

void InitDefaultsPSceneRequest_Sphere() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPSceneRequest_SphereImpl);
}

void InitDefaultsPSceneRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_RenderMessage_2eproto::InitDefaultsPSceneRequest_Material();
  protobuf_RenderMessage_2eproto::InitDefaultsPSceneRequest_Mesh();
  protobuf_RenderMessage_2eproto::InitDefaultsPSceneRequest_Sphere();
  protobuf_RenderMessage_2eproto::InitDefaultsVec3();
  {
    void* ptr = &::_PSceneRequest_default_instance_;
    new (ptr) ::PSceneRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PSceneRequest::InitAsDefaultInstance();
}

void InitDefaultsPSceneRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPSceneRequestImpl);
}

void InitDefaultsPRenderPixelResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_RenderMessage_2eproto::InitDefaultsVec3();
  {
    void* ptr = &::_PRenderPixelResponse_default_instance_;
    new (ptr) ::PRenderPixelResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PRenderPixelResponse::InitAsDefaultInstance();
}

void InitDefaultsPRenderPixelResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPRenderPixelResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[8];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Vec3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Vec3, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Vec3, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Vec3, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PCheckRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PCheckRequest, core_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PCheckRequest, spp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PCheckRequest, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PCheckRequest, height_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PSceneRequest_Triangle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PSceneRequest_Triangle, a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PSceneRequest_Triangle, b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PSceneRequest_Triangle, c_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PSceneRequest_Material, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PSceneRequest_Material, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PSceneRequest_Material, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PSceneRequest_Material, parameters_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PSceneRequest_Mesh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PSceneRequest_Mesh, matname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PSceneRequest_Mesh, triangles_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PSceneRequest_Sphere, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PSceneRequest_Sphere, matname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PSceneRequest_Sphere, center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PSceneRequest_Sphere, radious_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PSceneRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PSceneRequest, materials_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PSceneRequest, meshs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PSceneRequest, spheres_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PSceneRequest, cameralocation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PSceneRequest, cameraforward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PSceneRequest, cameraright_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PRenderPixelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PRenderPixelResponse, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PRenderPixelResponse, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PRenderPixelResponse, result_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Vec3)},
  { 8, -1, sizeof(::PCheckRequest)},
  { 17, -1, sizeof(::PSceneRequest_Triangle)},
  { 25, -1, sizeof(::PSceneRequest_Material)},
  { 33, -1, sizeof(::PSceneRequest_Mesh)},
  { 40, -1, sizeof(::PSceneRequest_Sphere)},
  { 48, -1, sizeof(::PSceneRequest)},
  { 59, -1, sizeof(::PRenderPixelResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Vec3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PCheckRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PSceneRequest_Triangle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PSceneRequest_Material_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PSceneRequest_Mesh_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PSceneRequest_Sphere_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PSceneRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PRenderPixelResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "RenderMessage.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023RenderMessage.proto\"\'\n\004Vec3\022\t\n\001X\030\001 \001(\002"
      "\022\t\n\001Y\030\002 \001(\002\022\t\n\001Z\030\003 \001(\002\"I\n\rPCheckRequest\022"
      "\014\n\004Core\030\001 \001(\005\022\013\n\003Spp\030\002 \001(\005\022\r\n\005Width\030\003 \001("
      "\005\022\016\n\006Height\030\004 \001(\005\"\346\003\n\rPSceneRequest\022*\n\tM"
      "aterials\030\001 \003(\0132\027.PSceneRequest.Material\022"
      "\"\n\005Meshs\030\002 \003(\0132\023.PSceneRequest.Mesh\022&\n\007S"
      "pheres\030\003 \003(\0132\025.PSceneRequest.Sphere\022\035\n\016C"
      "ameraLocation\030\004 \001(\0132\005.Vec3\022\034\n\rCameraForw"
      "ard\030\005 \001(\0132\005.Vec3\022\032\n\013CameraRight\030\006 \001(\0132\005."
      "Vec3\032@\n\010Triangle\022\020\n\001A\030\001 \001(\0132\005.Vec3\022\020\n\001B\030"
      "\002 \001(\0132\005.Vec3\022\020\n\001C\030\003 \001(\0132\005.Vec3\032:\n\010Materi"
      "al\022\014\n\004Name\030\001 \001(\t\022\014\n\004Type\030\002 \001(\005\022\022\n\nParame"
      "ters\030\003 \003(\002\032C\n\004Mesh\022\017\n\007MatName\030\001 \001(\t\022*\n\tT"
      "riangles\030\002 \003(\0132\027.PSceneRequest.Triangle\032"
      "A\n\006Sphere\022\017\n\007MatName\030\001 \001(\t\022\025\n\006Center\030\002 \001"
      "(\0132\005.Vec3\022\017\n\007Radious\030\003 \001(\002\"C\n\024PRenderPix"
      "elResponse\022\t\n\001X\030\001 \001(\005\022\t\n\001Y\030\002 \001(\005\022\025\n\006Resu"
      "lt\030\003 \001(\0132\005.Vec3b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 703);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RenderMessage.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_RenderMessage_2eproto

// ===================================================================

void Vec3::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vec3::kXFieldNumber;
const int Vec3::kYFieldNumber;
const int Vec3::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vec3::Vec3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_RenderMessage_2eproto::InitDefaultsVec3();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vec3)
}
Vec3::Vec3(const Vec3& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:Vec3)
}

void Vec3::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _cached_size_ = 0;
}

Vec3::~Vec3() {
  // @@protoc_insertion_point(destructor:Vec3)
  SharedDtor();
}

void Vec3::SharedDtor() {
}

void Vec3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vec3::descriptor() {
  ::protobuf_RenderMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RenderMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vec3& Vec3::default_instance() {
  ::protobuf_RenderMessage_2eproto::InitDefaultsVec3();
  return *internal_default_instance();
}

Vec3* Vec3::New(::google::protobuf::Arena* arena) const {
  Vec3* n = new Vec3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vec3::Clear() {
// @@protoc_insertion_point(message_clear_start:Vec3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

bool Vec3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Vec3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float X = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Vec3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Vec3)
  return false;
#undef DO_
}

void Vec3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Vec3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float X = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float Y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float Z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Vec3)
}

::google::protobuf::uint8* Vec3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Vec3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float X = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float Y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float Z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vec3)
  return target;
}

size_t Vec3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vec3)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float X = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float Y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float Z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vec3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Vec3)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vec3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Vec3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Vec3)
    MergeFrom(*source);
  }
}

void Vec3::MergeFrom(const Vec3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Vec3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Vec3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec3::CopyFrom(const Vec3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3::IsInitialized() const {
  return true;
}

void Vec3::Swap(Vec3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vec3::InternalSwap(Vec3* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vec3::GetMetadata() const {
  protobuf_RenderMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RenderMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PCheckRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PCheckRequest::kCoreFieldNumber;
const int PCheckRequest::kSppFieldNumber;
const int PCheckRequest::kWidthFieldNumber;
const int PCheckRequest::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PCheckRequest::PCheckRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_RenderMessage_2eproto::InitDefaultsPCheckRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PCheckRequest)
}
PCheckRequest::PCheckRequest(const PCheckRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&core_, &from.core_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&core_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:PCheckRequest)
}

void PCheckRequest::SharedCtor() {
  ::memset(&core_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&core_)) + sizeof(height_));
  _cached_size_ = 0;
}

PCheckRequest::~PCheckRequest() {
  // @@protoc_insertion_point(destructor:PCheckRequest)
  SharedDtor();
}

void PCheckRequest::SharedDtor() {
}

void PCheckRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PCheckRequest::descriptor() {
  ::protobuf_RenderMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RenderMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PCheckRequest& PCheckRequest::default_instance() {
  ::protobuf_RenderMessage_2eproto::InitDefaultsPCheckRequest();
  return *internal_default_instance();
}

PCheckRequest* PCheckRequest::New(::google::protobuf::Arena* arena) const {
  PCheckRequest* n = new PCheckRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PCheckRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:PCheckRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&core_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&core_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

bool PCheckRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PCheckRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Core = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &core_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Spp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PCheckRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PCheckRequest)
  return false;
#undef DO_
}

void PCheckRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PCheckRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Core = 1;
  if (this->core() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->core(), output);
  }

  // int32 Spp = 2;
  if (this->spp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->spp(), output);
  }

  // int32 Width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // int32 Height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PCheckRequest)
}

::google::protobuf::uint8* PCheckRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PCheckRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Core = 1;
  if (this->core() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->core(), target);
  }

  // int32 Spp = 2;
  if (this->spp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->spp(), target);
  }

  // int32 Width = 3;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // int32 Height = 4;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PCheckRequest)
  return target;
}

size_t PCheckRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PCheckRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 Core = 1;
  if (this->core() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->core());
  }

  // int32 Spp = 2;
  if (this->spp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->spp());
  }

  // int32 Width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 Height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PCheckRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PCheckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PCheckRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PCheckRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PCheckRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PCheckRequest)
    MergeFrom(*source);
  }
}

void PCheckRequest::MergeFrom(const PCheckRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PCheckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.core() != 0) {
    set_core(from.core());
  }
  if (from.spp() != 0) {
    set_spp(from.spp());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void PCheckRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PCheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PCheckRequest::CopyFrom(const PCheckRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PCheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PCheckRequest::IsInitialized() const {
  return true;
}

void PCheckRequest::Swap(PCheckRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PCheckRequest::InternalSwap(PCheckRequest* other) {
  using std::swap;
  swap(core_, other->core_);
  swap(spp_, other->spp_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PCheckRequest::GetMetadata() const {
  protobuf_RenderMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RenderMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PSceneRequest_Triangle::InitAsDefaultInstance() {
  ::_PSceneRequest_Triangle_default_instance_._instance.get_mutable()->a_ = const_cast< ::Vec3*>(
      ::Vec3::internal_default_instance());
  ::_PSceneRequest_Triangle_default_instance_._instance.get_mutable()->b_ = const_cast< ::Vec3*>(
      ::Vec3::internal_default_instance());
  ::_PSceneRequest_Triangle_default_instance_._instance.get_mutable()->c_ = const_cast< ::Vec3*>(
      ::Vec3::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PSceneRequest_Triangle::kAFieldNumber;
const int PSceneRequest_Triangle::kBFieldNumber;
const int PSceneRequest_Triangle::kCFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PSceneRequest_Triangle::PSceneRequest_Triangle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_RenderMessage_2eproto::InitDefaultsPSceneRequest_Triangle();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PSceneRequest.Triangle)
}
PSceneRequest_Triangle::PSceneRequest_Triangle(const PSceneRequest_Triangle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_a()) {
    a_ = new ::Vec3(*from.a_);
  } else {
    a_ = NULL;
  }
  if (from.has_b()) {
    b_ = new ::Vec3(*from.b_);
  } else {
    b_ = NULL;
  }
  if (from.has_c()) {
    c_ = new ::Vec3(*from.c_);
  } else {
    c_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:PSceneRequest.Triangle)
}

void PSceneRequest_Triangle::SharedCtor() {
  ::memset(&a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&c_) -
      reinterpret_cast<char*>(&a_)) + sizeof(c_));
  _cached_size_ = 0;
}

PSceneRequest_Triangle::~PSceneRequest_Triangle() {
  // @@protoc_insertion_point(destructor:PSceneRequest.Triangle)
  SharedDtor();
}

void PSceneRequest_Triangle::SharedDtor() {
  if (this != internal_default_instance()) delete a_;
  if (this != internal_default_instance()) delete b_;
  if (this != internal_default_instance()) delete c_;
}

void PSceneRequest_Triangle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PSceneRequest_Triangle::descriptor() {
  ::protobuf_RenderMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RenderMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PSceneRequest_Triangle& PSceneRequest_Triangle::default_instance() {
  ::protobuf_RenderMessage_2eproto::InitDefaultsPSceneRequest_Triangle();
  return *internal_default_instance();
}

PSceneRequest_Triangle* PSceneRequest_Triangle::New(::google::protobuf::Arena* arena) const {
  PSceneRequest_Triangle* n = new PSceneRequest_Triangle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PSceneRequest_Triangle::Clear() {
// @@protoc_insertion_point(message_clear_start:PSceneRequest.Triangle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && a_ != NULL) {
    delete a_;
  }
  a_ = NULL;
  if (GetArenaNoVirtual() == NULL && b_ != NULL) {
    delete b_;
  }
  b_ = NULL;
  if (GetArenaNoVirtual() == NULL && c_ != NULL) {
    delete c_;
  }
  c_ = NULL;
  _internal_metadata_.Clear();
}

bool PSceneRequest_Triangle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PSceneRequest.Triangle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Vec3 A = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_a()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Vec3 B = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_b()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Vec3 C = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_c()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PSceneRequest.Triangle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PSceneRequest.Triangle)
  return false;
#undef DO_
}

void PSceneRequest_Triangle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PSceneRequest.Triangle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Vec3 A = 1;
  if (this->has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->a_, output);
  }

  // .Vec3 B = 2;
  if (this->has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->b_, output);
  }

  // .Vec3 C = 3;
  if (this->has_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->c_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PSceneRequest.Triangle)
}

::google::protobuf::uint8* PSceneRequest_Triangle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PSceneRequest.Triangle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Vec3 A = 1;
  if (this->has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->a_, deterministic, target);
  }

  // .Vec3 B = 2;
  if (this->has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->b_, deterministic, target);
  }

  // .Vec3 C = 3;
  if (this->has_c()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->c_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PSceneRequest.Triangle)
  return target;
}

size_t PSceneRequest_Triangle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PSceneRequest.Triangle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Vec3 A = 1;
  if (this->has_a()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->a_);
  }

  // .Vec3 B = 2;
  if (this->has_b()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->b_);
  }

  // .Vec3 C = 3;
  if (this->has_c()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->c_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PSceneRequest_Triangle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PSceneRequest.Triangle)
  GOOGLE_DCHECK_NE(&from, this);
  const PSceneRequest_Triangle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PSceneRequest_Triangle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PSceneRequest.Triangle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PSceneRequest.Triangle)
    MergeFrom(*source);
  }
}

void PSceneRequest_Triangle::MergeFrom(const PSceneRequest_Triangle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PSceneRequest.Triangle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_a()) {
    mutable_a()->::Vec3::MergeFrom(from.a());
  }
  if (from.has_b()) {
    mutable_b()->::Vec3::MergeFrom(from.b());
  }
  if (from.has_c()) {
    mutable_c()->::Vec3::MergeFrom(from.c());
  }
}

void PSceneRequest_Triangle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PSceneRequest.Triangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PSceneRequest_Triangle::CopyFrom(const PSceneRequest_Triangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PSceneRequest.Triangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSceneRequest_Triangle::IsInitialized() const {
  return true;
}

void PSceneRequest_Triangle::Swap(PSceneRequest_Triangle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PSceneRequest_Triangle::InternalSwap(PSceneRequest_Triangle* other) {
  using std::swap;
  swap(a_, other->a_);
  swap(b_, other->b_);
  swap(c_, other->c_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PSceneRequest_Triangle::GetMetadata() const {
  protobuf_RenderMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RenderMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PSceneRequest_Material::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PSceneRequest_Material::kNameFieldNumber;
const int PSceneRequest_Material::kTypeFieldNumber;
const int PSceneRequest_Material::kParametersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PSceneRequest_Material::PSceneRequest_Material()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_RenderMessage_2eproto::InitDefaultsPSceneRequest_Material();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PSceneRequest.Material)
}
PSceneRequest_Material::PSceneRequest_Material(const PSceneRequest_Material& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      parameters_(from.parameters_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:PSceneRequest.Material)
}

void PSceneRequest_Material::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

PSceneRequest_Material::~PSceneRequest_Material() {
  // @@protoc_insertion_point(destructor:PSceneRequest.Material)
  SharedDtor();
}

void PSceneRequest_Material::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PSceneRequest_Material::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PSceneRequest_Material::descriptor() {
  ::protobuf_RenderMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RenderMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PSceneRequest_Material& PSceneRequest_Material::default_instance() {
  ::protobuf_RenderMessage_2eproto::InitDefaultsPSceneRequest_Material();
  return *internal_default_instance();
}

PSceneRequest_Material* PSceneRequest_Material::New(::google::protobuf::Arena* arena) const {
  PSceneRequest_Material* n = new PSceneRequest_Material;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PSceneRequest_Material::Clear() {
// @@protoc_insertion_point(message_clear_start:PSceneRequest.Material)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameters_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

bool PSceneRequest_Material::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PSceneRequest.Material)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PSceneRequest.Material.Name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float Parameters = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_parameters())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_parameters())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PSceneRequest.Material)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PSceneRequest.Material)
  return false;
#undef DO_
}

void PSceneRequest_Material::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PSceneRequest.Material)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PSceneRequest.Material.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 Type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // repeated float Parameters = 3;
  if (this->parameters_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _parameters_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->parameters().data(), this->parameters_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PSceneRequest.Material)
}

::google::protobuf::uint8* PSceneRequest_Material::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PSceneRequest.Material)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PSceneRequest.Material.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int32 Type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // repeated float Parameters = 3;
  if (this->parameters_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _parameters_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->parameters_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PSceneRequest.Material)
  return target;
}

size_t PSceneRequest_Material::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PSceneRequest.Material)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float Parameters = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->parameters_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _parameters_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 Type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PSceneRequest_Material::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PSceneRequest.Material)
  GOOGLE_DCHECK_NE(&from, this);
  const PSceneRequest_Material* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PSceneRequest_Material>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PSceneRequest.Material)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PSceneRequest.Material)
    MergeFrom(*source);
  }
}

void PSceneRequest_Material::MergeFrom(const PSceneRequest_Material& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PSceneRequest.Material)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parameters_.MergeFrom(from.parameters_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void PSceneRequest_Material::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PSceneRequest.Material)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PSceneRequest_Material::CopyFrom(const PSceneRequest_Material& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PSceneRequest.Material)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSceneRequest_Material::IsInitialized() const {
  return true;
}

void PSceneRequest_Material::Swap(PSceneRequest_Material* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PSceneRequest_Material::InternalSwap(PSceneRequest_Material* other) {
  using std::swap;
  parameters_.InternalSwap(&other->parameters_);
  name_.Swap(&other->name_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PSceneRequest_Material::GetMetadata() const {
  protobuf_RenderMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RenderMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PSceneRequest_Mesh::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PSceneRequest_Mesh::kMatNameFieldNumber;
const int PSceneRequest_Mesh::kTrianglesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PSceneRequest_Mesh::PSceneRequest_Mesh()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_RenderMessage_2eproto::InitDefaultsPSceneRequest_Mesh();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PSceneRequest.Mesh)
}
PSceneRequest_Mesh::PSceneRequest_Mesh(const PSceneRequest_Mesh& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      triangles_(from.triangles_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  matname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.matname().size() > 0) {
    matname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.matname_);
  }
  // @@protoc_insertion_point(copy_constructor:PSceneRequest.Mesh)
}

void PSceneRequest_Mesh::SharedCtor() {
  matname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PSceneRequest_Mesh::~PSceneRequest_Mesh() {
  // @@protoc_insertion_point(destructor:PSceneRequest.Mesh)
  SharedDtor();
}

void PSceneRequest_Mesh::SharedDtor() {
  matname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PSceneRequest_Mesh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PSceneRequest_Mesh::descriptor() {
  ::protobuf_RenderMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RenderMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PSceneRequest_Mesh& PSceneRequest_Mesh::default_instance() {
  ::protobuf_RenderMessage_2eproto::InitDefaultsPSceneRequest_Mesh();
  return *internal_default_instance();
}

PSceneRequest_Mesh* PSceneRequest_Mesh::New(::google::protobuf::Arena* arena) const {
  PSceneRequest_Mesh* n = new PSceneRequest_Mesh;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PSceneRequest_Mesh::Clear() {
// @@protoc_insertion_point(message_clear_start:PSceneRequest.Mesh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  triangles_.Clear();
  matname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PSceneRequest_Mesh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PSceneRequest.Mesh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string MatName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_matname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->matname().data(), static_cast<int>(this->matname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PSceneRequest.Mesh.MatName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .PSceneRequest.Triangle Triangles = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_triangles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PSceneRequest.Mesh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PSceneRequest.Mesh)
  return false;
#undef DO_
}

void PSceneRequest_Mesh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PSceneRequest.Mesh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string MatName = 1;
  if (this->matname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->matname().data(), static_cast<int>(this->matname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PSceneRequest.Mesh.MatName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->matname(), output);
  }

  // repeated .PSceneRequest.Triangle Triangles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->triangles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->triangles(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PSceneRequest.Mesh)
}

::google::protobuf::uint8* PSceneRequest_Mesh::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PSceneRequest.Mesh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string MatName = 1;
  if (this->matname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->matname().data(), static_cast<int>(this->matname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PSceneRequest.Mesh.MatName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->matname(), target);
  }

  // repeated .PSceneRequest.Triangle Triangles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->triangles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->triangles(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PSceneRequest.Mesh)
  return target;
}

size_t PSceneRequest_Mesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PSceneRequest.Mesh)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .PSceneRequest.Triangle Triangles = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->triangles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->triangles(static_cast<int>(i)));
    }
  }

  // string MatName = 1;
  if (this->matname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->matname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PSceneRequest_Mesh::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PSceneRequest.Mesh)
  GOOGLE_DCHECK_NE(&from, this);
  const PSceneRequest_Mesh* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PSceneRequest_Mesh>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PSceneRequest.Mesh)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PSceneRequest.Mesh)
    MergeFrom(*source);
  }
}

void PSceneRequest_Mesh::MergeFrom(const PSceneRequest_Mesh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PSceneRequest.Mesh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  triangles_.MergeFrom(from.triangles_);
  if (from.matname().size() > 0) {

    matname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.matname_);
  }
}

void PSceneRequest_Mesh::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PSceneRequest.Mesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PSceneRequest_Mesh::CopyFrom(const PSceneRequest_Mesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PSceneRequest.Mesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSceneRequest_Mesh::IsInitialized() const {
  return true;
}

void PSceneRequest_Mesh::Swap(PSceneRequest_Mesh* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PSceneRequest_Mesh::InternalSwap(PSceneRequest_Mesh* other) {
  using std::swap;
  triangles_.InternalSwap(&other->triangles_);
  matname_.Swap(&other->matname_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PSceneRequest_Mesh::GetMetadata() const {
  protobuf_RenderMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RenderMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PSceneRequest_Sphere::InitAsDefaultInstance() {
  ::_PSceneRequest_Sphere_default_instance_._instance.get_mutable()->center_ = const_cast< ::Vec3*>(
      ::Vec3::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PSceneRequest_Sphere::kMatNameFieldNumber;
const int PSceneRequest_Sphere::kCenterFieldNumber;
const int PSceneRequest_Sphere::kRadiousFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PSceneRequest_Sphere::PSceneRequest_Sphere()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_RenderMessage_2eproto::InitDefaultsPSceneRequest_Sphere();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PSceneRequest.Sphere)
}
PSceneRequest_Sphere::PSceneRequest_Sphere(const PSceneRequest_Sphere& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  matname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.matname().size() > 0) {
    matname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.matname_);
  }
  if (from.has_center()) {
    center_ = new ::Vec3(*from.center_);
  } else {
    center_ = NULL;
  }
  radious_ = from.radious_;
  // @@protoc_insertion_point(copy_constructor:PSceneRequest.Sphere)
}

void PSceneRequest_Sphere::SharedCtor() {
  matname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radious_) -
      reinterpret_cast<char*>(&center_)) + sizeof(radious_));
  _cached_size_ = 0;
}

PSceneRequest_Sphere::~PSceneRequest_Sphere() {
  // @@protoc_insertion_point(destructor:PSceneRequest.Sphere)
  SharedDtor();
}

void PSceneRequest_Sphere::SharedDtor() {
  matname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete center_;
}

void PSceneRequest_Sphere::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PSceneRequest_Sphere::descriptor() {
  ::protobuf_RenderMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RenderMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PSceneRequest_Sphere& PSceneRequest_Sphere::default_instance() {
  ::protobuf_RenderMessage_2eproto::InitDefaultsPSceneRequest_Sphere();
  return *internal_default_instance();
}

PSceneRequest_Sphere* PSceneRequest_Sphere::New(::google::protobuf::Arena* arena) const {
  PSceneRequest_Sphere* n = new PSceneRequest_Sphere;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PSceneRequest_Sphere::Clear() {
// @@protoc_insertion_point(message_clear_start:PSceneRequest.Sphere)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && center_ != NULL) {
    delete center_;
  }
  center_ = NULL;
  radious_ = 0;
  _internal_metadata_.Clear();
}

bool PSceneRequest_Sphere::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PSceneRequest.Sphere)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string MatName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_matname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->matname().data(), static_cast<int>(this->matname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PSceneRequest.Sphere.MatName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Vec3 Center = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Radious = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radious_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PSceneRequest.Sphere)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PSceneRequest.Sphere)
  return false;
#undef DO_
}

void PSceneRequest_Sphere::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PSceneRequest.Sphere)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string MatName = 1;
  if (this->matname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->matname().data(), static_cast<int>(this->matname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PSceneRequest.Sphere.MatName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->matname(), output);
  }

  // .Vec3 Center = 2;
  if (this->has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->center_, output);
  }

  // float Radious = 3;
  if (this->radious() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->radious(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PSceneRequest.Sphere)
}

::google::protobuf::uint8* PSceneRequest_Sphere::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PSceneRequest.Sphere)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string MatName = 1;
  if (this->matname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->matname().data(), static_cast<int>(this->matname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PSceneRequest.Sphere.MatName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->matname(), target);
  }

  // .Vec3 Center = 2;
  if (this->has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->center_, deterministic, target);
  }

  // float Radious = 3;
  if (this->radious() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->radious(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PSceneRequest.Sphere)
  return target;
}

size_t PSceneRequest_Sphere::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PSceneRequest.Sphere)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string MatName = 1;
  if (this->matname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->matname());
  }

  // .Vec3 Center = 2;
  if (this->has_center()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->center_);
  }

  // float Radious = 3;
  if (this->radious() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PSceneRequest_Sphere::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PSceneRequest.Sphere)
  GOOGLE_DCHECK_NE(&from, this);
  const PSceneRequest_Sphere* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PSceneRequest_Sphere>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PSceneRequest.Sphere)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PSceneRequest.Sphere)
    MergeFrom(*source);
  }
}

void PSceneRequest_Sphere::MergeFrom(const PSceneRequest_Sphere& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PSceneRequest.Sphere)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.matname().size() > 0) {

    matname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.matname_);
  }
  if (from.has_center()) {
    mutable_center()->::Vec3::MergeFrom(from.center());
  }
  if (from.radious() != 0) {
    set_radious(from.radious());
  }
}

void PSceneRequest_Sphere::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PSceneRequest.Sphere)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PSceneRequest_Sphere::CopyFrom(const PSceneRequest_Sphere& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PSceneRequest.Sphere)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSceneRequest_Sphere::IsInitialized() const {
  return true;
}

void PSceneRequest_Sphere::Swap(PSceneRequest_Sphere* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PSceneRequest_Sphere::InternalSwap(PSceneRequest_Sphere* other) {
  using std::swap;
  matname_.Swap(&other->matname_);
  swap(center_, other->center_);
  swap(radious_, other->radious_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PSceneRequest_Sphere::GetMetadata() const {
  protobuf_RenderMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RenderMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PSceneRequest::InitAsDefaultInstance() {
  ::_PSceneRequest_default_instance_._instance.get_mutable()->cameralocation_ = const_cast< ::Vec3*>(
      ::Vec3::internal_default_instance());
  ::_PSceneRequest_default_instance_._instance.get_mutable()->cameraforward_ = const_cast< ::Vec3*>(
      ::Vec3::internal_default_instance());
  ::_PSceneRequest_default_instance_._instance.get_mutable()->cameraright_ = const_cast< ::Vec3*>(
      ::Vec3::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PSceneRequest::kMaterialsFieldNumber;
const int PSceneRequest::kMeshsFieldNumber;
const int PSceneRequest::kSpheresFieldNumber;
const int PSceneRequest::kCameraLocationFieldNumber;
const int PSceneRequest::kCameraForwardFieldNumber;
const int PSceneRequest::kCameraRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PSceneRequest::PSceneRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_RenderMessage_2eproto::InitDefaultsPSceneRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PSceneRequest)
}
PSceneRequest::PSceneRequest(const PSceneRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      materials_(from.materials_),
      meshs_(from.meshs_),
      spheres_(from.spheres_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cameralocation()) {
    cameralocation_ = new ::Vec3(*from.cameralocation_);
  } else {
    cameralocation_ = NULL;
  }
  if (from.has_cameraforward()) {
    cameraforward_ = new ::Vec3(*from.cameraforward_);
  } else {
    cameraforward_ = NULL;
  }
  if (from.has_cameraright()) {
    cameraright_ = new ::Vec3(*from.cameraright_);
  } else {
    cameraright_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:PSceneRequest)
}

void PSceneRequest::SharedCtor() {
  ::memset(&cameralocation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cameraright_) -
      reinterpret_cast<char*>(&cameralocation_)) + sizeof(cameraright_));
  _cached_size_ = 0;
}

PSceneRequest::~PSceneRequest() {
  // @@protoc_insertion_point(destructor:PSceneRequest)
  SharedDtor();
}

void PSceneRequest::SharedDtor() {
  if (this != internal_default_instance()) delete cameralocation_;
  if (this != internal_default_instance()) delete cameraforward_;
  if (this != internal_default_instance()) delete cameraright_;
}

void PSceneRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PSceneRequest::descriptor() {
  ::protobuf_RenderMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RenderMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PSceneRequest& PSceneRequest::default_instance() {
  ::protobuf_RenderMessage_2eproto::InitDefaultsPSceneRequest();
  return *internal_default_instance();
}

PSceneRequest* PSceneRequest::New(::google::protobuf::Arena* arena) const {
  PSceneRequest* n = new PSceneRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PSceneRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:PSceneRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  materials_.Clear();
  meshs_.Clear();
  spheres_.Clear();
  if (GetArenaNoVirtual() == NULL && cameralocation_ != NULL) {
    delete cameralocation_;
  }
  cameralocation_ = NULL;
  if (GetArenaNoVirtual() == NULL && cameraforward_ != NULL) {
    delete cameraforward_;
  }
  cameraforward_ = NULL;
  if (GetArenaNoVirtual() == NULL && cameraright_ != NULL) {
    delete cameraright_;
  }
  cameraright_ = NULL;
  _internal_metadata_.Clear();
}

bool PSceneRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PSceneRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PSceneRequest.Material Materials = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_materials()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .PSceneRequest.Mesh Meshs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_meshs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .PSceneRequest.Sphere Spheres = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_spheres()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Vec3 CameraLocation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cameralocation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Vec3 CameraForward = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cameraforward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Vec3 CameraRight = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cameraright()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PSceneRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PSceneRequest)
  return false;
#undef DO_
}

void PSceneRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PSceneRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PSceneRequest.Material Materials = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->materials_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->materials(static_cast<int>(i)), output);
  }

  // repeated .PSceneRequest.Mesh Meshs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->meshs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->meshs(static_cast<int>(i)), output);
  }

  // repeated .PSceneRequest.Sphere Spheres = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->spheres_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->spheres(static_cast<int>(i)), output);
  }

  // .Vec3 CameraLocation = 4;
  if (this->has_cameralocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->cameralocation_, output);
  }

  // .Vec3 CameraForward = 5;
  if (this->has_cameraforward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->cameraforward_, output);
  }

  // .Vec3 CameraRight = 6;
  if (this->has_cameraright()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->cameraright_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PSceneRequest)
}

::google::protobuf::uint8* PSceneRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PSceneRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PSceneRequest.Material Materials = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->materials_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->materials(static_cast<int>(i)), deterministic, target);
  }

  // repeated .PSceneRequest.Mesh Meshs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->meshs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->meshs(static_cast<int>(i)), deterministic, target);
  }

  // repeated .PSceneRequest.Sphere Spheres = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->spheres_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->spheres(static_cast<int>(i)), deterministic, target);
  }

  // .Vec3 CameraLocation = 4;
  if (this->has_cameralocation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->cameralocation_, deterministic, target);
  }

  // .Vec3 CameraForward = 5;
  if (this->has_cameraforward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->cameraforward_, deterministic, target);
  }

  // .Vec3 CameraRight = 6;
  if (this->has_cameraright()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->cameraright_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PSceneRequest)
  return target;
}

size_t PSceneRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PSceneRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .PSceneRequest.Material Materials = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->materials_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->materials(static_cast<int>(i)));
    }
  }

  // repeated .PSceneRequest.Mesh Meshs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->meshs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->meshs(static_cast<int>(i)));
    }
  }

  // repeated .PSceneRequest.Sphere Spheres = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->spheres_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->spheres(static_cast<int>(i)));
    }
  }

  // .Vec3 CameraLocation = 4;
  if (this->has_cameralocation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cameralocation_);
  }

  // .Vec3 CameraForward = 5;
  if (this->has_cameraforward()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cameraforward_);
  }

  // .Vec3 CameraRight = 6;
  if (this->has_cameraright()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cameraright_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PSceneRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PSceneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PSceneRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PSceneRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PSceneRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PSceneRequest)
    MergeFrom(*source);
  }
}

void PSceneRequest::MergeFrom(const PSceneRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PSceneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  materials_.MergeFrom(from.materials_);
  meshs_.MergeFrom(from.meshs_);
  spheres_.MergeFrom(from.spheres_);
  if (from.has_cameralocation()) {
    mutable_cameralocation()->::Vec3::MergeFrom(from.cameralocation());
  }
  if (from.has_cameraforward()) {
    mutable_cameraforward()->::Vec3::MergeFrom(from.cameraforward());
  }
  if (from.has_cameraright()) {
    mutable_cameraright()->::Vec3::MergeFrom(from.cameraright());
  }
}

void PSceneRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PSceneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PSceneRequest::CopyFrom(const PSceneRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PSceneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSceneRequest::IsInitialized() const {
  return true;
}

void PSceneRequest::Swap(PSceneRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PSceneRequest::InternalSwap(PSceneRequest* other) {
  using std::swap;
  materials_.InternalSwap(&other->materials_);
  meshs_.InternalSwap(&other->meshs_);
  spheres_.InternalSwap(&other->spheres_);
  swap(cameralocation_, other->cameralocation_);
  swap(cameraforward_, other->cameraforward_);
  swap(cameraright_, other->cameraright_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PSceneRequest::GetMetadata() const {
  protobuf_RenderMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RenderMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PRenderPixelResponse::InitAsDefaultInstance() {
  ::_PRenderPixelResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::Vec3*>(
      ::Vec3::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PRenderPixelResponse::kXFieldNumber;
const int PRenderPixelResponse::kYFieldNumber;
const int PRenderPixelResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PRenderPixelResponse::PRenderPixelResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_RenderMessage_2eproto::InitDefaultsPRenderPixelResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PRenderPixelResponse)
}
PRenderPixelResponse::PRenderPixelResponse(const PRenderPixelResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::Vec3(*from.result_);
  } else {
    result_ = NULL;
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:PRenderPixelResponse)
}

void PRenderPixelResponse::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&result_)) + sizeof(y_));
  _cached_size_ = 0;
}

PRenderPixelResponse::~PRenderPixelResponse() {
  // @@protoc_insertion_point(destructor:PRenderPixelResponse)
  SharedDtor();
}

void PRenderPixelResponse::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void PRenderPixelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PRenderPixelResponse::descriptor() {
  ::protobuf_RenderMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RenderMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PRenderPixelResponse& PRenderPixelResponse::default_instance() {
  ::protobuf_RenderMessage_2eproto::InitDefaultsPRenderPixelResponse();
  return *internal_default_instance();
}

PRenderPixelResponse* PRenderPixelResponse::New(::google::protobuf::Arena* arena) const {
  PRenderPixelResponse* n = new PRenderPixelResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PRenderPixelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:PRenderPixelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && result_ != NULL) {
    delete result_;
  }
  result_ = NULL;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool PRenderPixelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PRenderPixelResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 X = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Vec3 Result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PRenderPixelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PRenderPixelResponse)
  return false;
#undef DO_
}

void PRenderPixelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PRenderPixelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 X = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // int32 Y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // .Vec3 Result = 3;
  if (this->has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->result_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PRenderPixelResponse)
}

::google::protobuf::uint8* PRenderPixelResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PRenderPixelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 X = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // int32 Y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // .Vec3 Result = 3;
  if (this->has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->result_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRenderPixelResponse)
  return target;
}

size_t PRenderPixelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRenderPixelResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Vec3 Result = 3;
  if (this->has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->result_);
  }

  // int32 X = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // int32 Y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PRenderPixelResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PRenderPixelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PRenderPixelResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PRenderPixelResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PRenderPixelResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PRenderPixelResponse)
    MergeFrom(*source);
  }
}

void PRenderPixelResponse::MergeFrom(const PRenderPixelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRenderPixelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    mutable_result()->::Vec3::MergeFrom(from.result());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void PRenderPixelResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PRenderPixelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PRenderPixelResponse::CopyFrom(const PRenderPixelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRenderPixelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRenderPixelResponse::IsInitialized() const {
  return true;
}

void PRenderPixelResponse::Swap(PRenderPixelResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PRenderPixelResponse::InternalSwap(PRenderPixelResponse* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PRenderPixelResponse::GetMetadata() const {
  protobuf_RenderMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RenderMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
